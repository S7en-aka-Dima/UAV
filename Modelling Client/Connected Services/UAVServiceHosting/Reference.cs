//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Modelling_Client.UAVServiceHosting {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UAVBase", Namespace="http://schemas.datacontract.org/2004/07/Modelling_Client.Models")]
    [System.SerializableAttribute()]
    public partial class UAVBase : Modelling_Client.UAVServiceHosting.BaseViewModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Windows.Media.Color ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Modelling_Client.UAVServiceHosting.RouteSegment CurrentSegmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DangerClientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DangerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Modelling_Client.UAVServiceHosting.DangerLevel DangerLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Modelling_Client.UAVServiceHosting.RouteSegment[] RouteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Modelling_Client.UAVServiceHosting.UAVSettings SettingsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanChange {
            get {
                return this.CanChangeField;
            }
            set {
                if ((this.CanChangeField.Equals(value) != true)) {
                    this.CanChangeField = value;
                    this.RaisePropertyChanged("CanChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((this.ClientIDField.Equals(value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Windows.Media.Color Color {
            get {
                return this.ColorField;
            }
            set {
                if ((this.ColorField.Equals(value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Modelling_Client.UAVServiceHosting.RouteSegment CurrentSegment {
            get {
                return this.CurrentSegmentField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentSegmentField, value) != true)) {
                    this.CurrentSegmentField = value;
                    this.RaisePropertyChanged("CurrentSegment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DangerClientID {
            get {
                return this.DangerClientIDField;
            }
            set {
                if ((this.DangerClientIDField.Equals(value) != true)) {
                    this.DangerClientIDField = value;
                    this.RaisePropertyChanged("DangerClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DangerID {
            get {
                return this.DangerIDField;
            }
            set {
                if ((this.DangerIDField.Equals(value) != true)) {
                    this.DangerIDField = value;
                    this.RaisePropertyChanged("DangerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Modelling_Client.UAVServiceHosting.DangerLevel DangerLevel {
            get {
                return this.DangerLevelField;
            }
            set {
                if ((this.DangerLevelField.Equals(value) != true)) {
                    this.DangerLevelField = value;
                    this.RaisePropertyChanged("DangerLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Modelling_Client.UAVServiceHosting.RouteSegment[] Route {
            get {
                return this.RouteField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteField, value) != true)) {
                    this.RouteField = value;
                    this.RaisePropertyChanged("Route");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Modelling_Client.UAVServiceHosting.UAVSettings Settings {
            get {
                return this.SettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingsField, value) != true)) {
                    this.SettingsField = value;
                    this.RaisePropertyChanged("Settings");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseViewModel", Namespace="http://schemas.datacontract.org/2004/07/Modelling_Client.ViewModels")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Modelling_Client.UAVServiceHosting.RouteSegment))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Modelling_Client.UAVServiceHosting.UAVSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Modelling_Client.UAVServiceHosting.UAVBase))]
    public partial class BaseViewModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RouteSegment", Namespace="http://schemas.datacontract.org/2004/07/Modelling_Client.Models")]
    [System.SerializableAttribute()]
    public partial class RouteSegment : Modelling_Client.UAVServiceHosting.BaseViewModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DiscretionToChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] EndPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double EndXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double EndYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double EndZField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpeedXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpeedYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpeedZField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] StartPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double StartXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double StartYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double StartZField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool discretionToChange1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] endPoint1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] speed1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] startPoint1Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DiscretionToChange {
            get {
                return this.DiscretionToChangeField;
            }
            set {
                if ((this.DiscretionToChangeField.Equals(value) != true)) {
                    this.DiscretionToChangeField = value;
                    this.RaisePropertyChanged("DiscretionToChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] EndPoint {
            get {
                return this.EndPointField;
            }
            set {
                if ((object.ReferenceEquals(this.EndPointField, value) != true)) {
                    this.EndPointField = value;
                    this.RaisePropertyChanged("EndPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double EndX {
            get {
                return this.EndXField;
            }
            set {
                if ((this.EndXField.Equals(value) != true)) {
                    this.EndXField = value;
                    this.RaisePropertyChanged("EndX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double EndY {
            get {
                return this.EndYField;
            }
            set {
                if ((this.EndYField.Equals(value) != true)) {
                    this.EndYField = value;
                    this.RaisePropertyChanged("EndY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double EndZ {
            get {
                return this.EndZField;
            }
            set {
                if ((this.EndZField.Equals(value) != true)) {
                    this.EndZField = value;
                    this.RaisePropertyChanged("EndZ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((object.ReferenceEquals(this.SpeedField, value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SpeedX {
            get {
                return this.SpeedXField;
            }
            set {
                if ((this.SpeedXField.Equals(value) != true)) {
                    this.SpeedXField = value;
                    this.RaisePropertyChanged("SpeedX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SpeedY {
            get {
                return this.SpeedYField;
            }
            set {
                if ((this.SpeedYField.Equals(value) != true)) {
                    this.SpeedYField = value;
                    this.RaisePropertyChanged("SpeedY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SpeedZ {
            get {
                return this.SpeedZField;
            }
            set {
                if ((this.SpeedZField.Equals(value) != true)) {
                    this.SpeedZField = value;
                    this.RaisePropertyChanged("SpeedZ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] StartPoint {
            get {
                return this.StartPointField;
            }
            set {
                if ((object.ReferenceEquals(this.StartPointField, value) != true)) {
                    this.StartPointField = value;
                    this.RaisePropertyChanged("StartPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double StartX {
            get {
                return this.StartXField;
            }
            set {
                if ((this.StartXField.Equals(value) != true)) {
                    this.StartXField = value;
                    this.RaisePropertyChanged("StartX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double StartY {
            get {
                return this.StartYField;
            }
            set {
                if ((this.StartYField.Equals(value) != true)) {
                    this.StartYField = value;
                    this.RaisePropertyChanged("StartY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double StartZ {
            get {
                return this.StartZField;
            }
            set {
                if ((this.StartZField.Equals(value) != true)) {
                    this.StartZField = value;
                    this.RaisePropertyChanged("StartZ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="discretionToChange")]
        public bool discretionToChange1 {
            get {
                return this.discretionToChange1Field;
            }
            set {
                if ((this.discretionToChange1Field.Equals(value) != true)) {
                    this.discretionToChange1Field = value;
                    this.RaisePropertyChanged("discretionToChange1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="endPoint")]
        public double[] endPoint1 {
            get {
                return this.endPoint1Field;
            }
            set {
                if ((object.ReferenceEquals(this.endPoint1Field, value) != true)) {
                    this.endPoint1Field = value;
                    this.RaisePropertyChanged("endPoint1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="speed")]
        public double[] speed1 {
            get {
                return this.speed1Field;
            }
            set {
                if ((object.ReferenceEquals(this.speed1Field, value) != true)) {
                    this.speed1Field = value;
                    this.RaisePropertyChanged("speed1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="startPoint")]
        public double[] startPoint1 {
            get {
                return this.startPoint1Field;
            }
            set {
                if ((object.ReferenceEquals(this.startPoint1Field, value) != true)) {
                    this.startPoint1Field = value;
                    this.RaisePropertyChanged("startPoint1");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UAVSettings", Namespace="http://schemas.datacontract.org/2004/07/Modelling_Client.Models")]
    [System.SerializableAttribute()]
    public partial class UAVSettings : Modelling_Client.UAVServiceHosting.BaseViewModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AccelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AccelXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AccelYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AccelZField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpeedXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpeedYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpeedZField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ZField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Accel {
            get {
                return this.AccelField;
            }
            set {
                if ((this.AccelField.Equals(value) != true)) {
                    this.AccelField = value;
                    this.RaisePropertyChanged("Accel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AccelX {
            get {
                return this.AccelXField;
            }
            set {
                if ((this.AccelXField.Equals(value) != true)) {
                    this.AccelXField = value;
                    this.RaisePropertyChanged("AccelX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AccelY {
            get {
                return this.AccelYField;
            }
            set {
                if ((this.AccelYField.Equals(value) != true)) {
                    this.AccelYField = value;
                    this.RaisePropertyChanged("AccelY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AccelZ {
            get {
                return this.AccelZField;
            }
            set {
                if ((this.AccelZField.Equals(value) != true)) {
                    this.AccelZField = value;
                    this.RaisePropertyChanged("AccelZ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxSpeed {
            get {
                return this.MaxSpeedField;
            }
            set {
                if ((this.MaxSpeedField.Equals(value) != true)) {
                    this.MaxSpeedField = value;
                    this.RaisePropertyChanged("MaxSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinSpeed {
            get {
                return this.MinSpeedField;
            }
            set {
                if ((this.MinSpeedField.Equals(value) != true)) {
                    this.MinSpeedField = value;
                    this.RaisePropertyChanged("MinSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SpeedX {
            get {
                return this.SpeedXField;
            }
            set {
                if ((this.SpeedXField.Equals(value) != true)) {
                    this.SpeedXField = value;
                    this.RaisePropertyChanged("SpeedX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SpeedY {
            get {
                return this.SpeedYField;
            }
            set {
                if ((this.SpeedYField.Equals(value) != true)) {
                    this.SpeedYField = value;
                    this.RaisePropertyChanged("SpeedY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SpeedZ {
            get {
                return this.SpeedZField;
            }
            set {
                if ((this.SpeedZField.Equals(value) != true)) {
                    this.SpeedZField = value;
                    this.RaisePropertyChanged("SpeedZ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Z {
            get {
                return this.ZField;
            }
            set {
                if ((this.ZField.Equals(value) != true)) {
                    this.ZField = value;
                    this.RaisePropertyChanged("Z");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DangerLevel", Namespace="http://schemas.datacontract.org/2004/07/Modelling_Client.Models.%D0%9F%D0%B5%D1%8" +
        "0%D0%B5%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F")]
    public enum DangerLevel : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SafeLevel = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Crash = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UAVServiceHosting.IUAVService", CallbackContract=typeof(Modelling_Client.UAVServiceHosting.IUAVServiceCallback))]
    public interface IUAVService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/Connect", ReplyAction="http://tempuri.org/IUAVService/ConnectResponse")]
        int Connect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/Connect", ReplyAction="http://tempuri.org/IUAVService/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/Disconnect")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/GetData", ReplyAction="http://tempuri.org/IUAVService/GetDataResponse")]
        Modelling_Client.UAVServiceHosting.UAVBase[][] GetData(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/GetData", ReplyAction="http://tempuri.org/IUAVService/GetDataResponse")]
        System.Threading.Tasks.Task<Modelling_Client.UAVServiceHosting.UAVBase[][]> GetDataAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/GetAllData", ReplyAction="http://tempuri.org/IUAVService/GetAllDataResponse")]
        Modelling_Client.UAVServiceHosting.UAVBase[][] GetAllData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/GetAllData", ReplyAction="http://tempuri.org/IUAVService/GetAllDataResponse")]
        System.Threading.Tasks.Task<Modelling_Client.UAVServiceHosting.UAVBase[][]> GetAllDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/SendValues")]
        void SendValues(Modelling_Client.UAVServiceHosting.UAVBase[] uav, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/SendValues")]
        System.Threading.Tasks.Task SendValuesAsync(Modelling_Client.UAVServiceHosting.UAVBase[] uav, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/SendValues1")]
        void SendValues1(string n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/SendValues1")]
        System.Threading.Tasks.Task SendValues1Async(string n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/LetsStart")]
        void LetsStart(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/LetsStart")]
        System.Threading.Tasks.Task LetsStartAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/ForcedStart")]
        void ForcedStart();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/ForcedStart")]
        System.Threading.Tasks.Task ForcedStartAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/StopModeling")]
        void StopModeling();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/StopModeling")]
        System.Threading.Tasks.Task StopModelingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/GetColor", ReplyAction="http://tempuri.org/IUAVService/GetColorResponse")]
        System.Windows.Media.Color GetColor(int CountUAVs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/GetColor", ReplyAction="http://tempuri.org/IUAVService/GetColorResponse")]
        System.Threading.Tasks.Task<System.Windows.Media.Color> GetColorAsync(int CountUAVs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/GetOldIteration", ReplyAction="http://tempuri.org/IUAVService/GetOldIterationResponse")]
        System.Collections.Generic.Dictionary<int, Modelling_Client.UAVServiceHosting.UAVBase[]> GetOldIteration(System.DateTime dateTimeModelling, int modellingNum, int iterationNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/GetOldIteration", ReplyAction="http://tempuri.org/IUAVService/GetOldIterationResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, Modelling_Client.UAVServiceHosting.UAVBase[]>> GetOldIterationAsync(System.DateTime dateTimeModelling, int modellingNum, int iterationNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/CanRepeatModelling", ReplyAction="http://tempuri.org/IUAVService/CanRepeatModellingResponse")]
        bool CanRepeatModelling(System.DateTime dateTimeModelling, int modellingNum, int iterationNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/CanRepeatModelling", ReplyAction="http://tempuri.org/IUAVService/CanRepeatModellingResponse")]
        System.Threading.Tasks.Task<bool> CanRepeatModellingAsync(System.DateTime dateTimeModelling, int modellingNum, int iterationNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/RepeatModelling", ReplyAction="http://tempuri.org/IUAVService/RepeatModellingResponse")]
        void RepeatModelling(System.DateTime dateTimeModelling, int modellingNum, int iterationNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUAVService/RepeatModelling", ReplyAction="http://tempuri.org/IUAVService/RepeatModellingResponse")]
        System.Threading.Tasks.Task RepeatModellingAsync(System.DateTime dateTimeModelling, int modellingNum, int iterationNum);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUAVServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/SendValuesCallBack")]
        void SendValuesCallBack(System.Collections.Generic.Dictionary<int, Modelling_Client.UAVServiceHosting.UAVBase[]> data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/SendValuesCallBack1")]
        void SendValuesCallBack1(string srt);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/GetStart")]
        void GetStart();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/Stop")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUAVService/RepeatOldModelling")]
        void RepeatOldModelling(Modelling_Client.UAVServiceHosting.UAVBase[] uavs);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUAVServiceChannel : Modelling_Client.UAVServiceHosting.IUAVService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UAVServiceClient : System.ServiceModel.DuplexClientBase<Modelling_Client.UAVServiceHosting.IUAVService>, Modelling_Client.UAVServiceHosting.IUAVService {
        
        public UAVServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public UAVServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public UAVServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UAVServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UAVServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(int id) {
            return base.Channel.Connect(id);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(int id) {
            return base.Channel.ConnectAsync(id);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public Modelling_Client.UAVServiceHosting.UAVBase[][] GetData(int id) {
            return base.Channel.GetData(id);
        }
        
        public System.Threading.Tasks.Task<Modelling_Client.UAVServiceHosting.UAVBase[][]> GetDataAsync(int id) {
            return base.Channel.GetDataAsync(id);
        }
        
        public Modelling_Client.UAVServiceHosting.UAVBase[][] GetAllData() {
            return base.Channel.GetAllData();
        }
        
        public System.Threading.Tasks.Task<Modelling_Client.UAVServiceHosting.UAVBase[][]> GetAllDataAsync() {
            return base.Channel.GetAllDataAsync();
        }
        
        public void SendValues(Modelling_Client.UAVServiceHosting.UAVBase[] uav, int id) {
            base.Channel.SendValues(uav, id);
        }
        
        public System.Threading.Tasks.Task SendValuesAsync(Modelling_Client.UAVServiceHosting.UAVBase[] uav, int id) {
            return base.Channel.SendValuesAsync(uav, id);
        }
        
        public void SendValues1(string n) {
            base.Channel.SendValues1(n);
        }
        
        public System.Threading.Tasks.Task SendValues1Async(string n) {
            return base.Channel.SendValues1Async(n);
        }
        
        public void LetsStart(int id) {
            base.Channel.LetsStart(id);
        }
        
        public System.Threading.Tasks.Task LetsStartAsync(int id) {
            return base.Channel.LetsStartAsync(id);
        }
        
        public void ForcedStart() {
            base.Channel.ForcedStart();
        }
        
        public System.Threading.Tasks.Task ForcedStartAsync() {
            return base.Channel.ForcedStartAsync();
        }
        
        public void StopModeling() {
            base.Channel.StopModeling();
        }
        
        public System.Threading.Tasks.Task StopModelingAsync() {
            return base.Channel.StopModelingAsync();
        }
        
        public System.Windows.Media.Color GetColor(int CountUAVs) {
            return base.Channel.GetColor(CountUAVs);
        }
        
        public System.Threading.Tasks.Task<System.Windows.Media.Color> GetColorAsync(int CountUAVs) {
            return base.Channel.GetColorAsync(CountUAVs);
        }
        
        public System.Collections.Generic.Dictionary<int, Modelling_Client.UAVServiceHosting.UAVBase[]> GetOldIteration(System.DateTime dateTimeModelling, int modellingNum, int iterationNum) {
            return base.Channel.GetOldIteration(dateTimeModelling, modellingNum, iterationNum);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, Modelling_Client.UAVServiceHosting.UAVBase[]>> GetOldIterationAsync(System.DateTime dateTimeModelling, int modellingNum, int iterationNum) {
            return base.Channel.GetOldIterationAsync(dateTimeModelling, modellingNum, iterationNum);
        }
        
        public bool CanRepeatModelling(System.DateTime dateTimeModelling, int modellingNum, int iterationNum) {
            return base.Channel.CanRepeatModelling(dateTimeModelling, modellingNum, iterationNum);
        }
        
        public System.Threading.Tasks.Task<bool> CanRepeatModellingAsync(System.DateTime dateTimeModelling, int modellingNum, int iterationNum) {
            return base.Channel.CanRepeatModellingAsync(dateTimeModelling, modellingNum, iterationNum);
        }
        
        public void RepeatModelling(System.DateTime dateTimeModelling, int modellingNum, int iterationNum) {
            base.Channel.RepeatModelling(dateTimeModelling, modellingNum, iterationNum);
        }
        
        public System.Threading.Tasks.Task RepeatModellingAsync(System.DateTime dateTimeModelling, int modellingNum, int iterationNum) {
            return base.Channel.RepeatModellingAsync(dateTimeModelling, modellingNum, iterationNum);
        }
    }
}
